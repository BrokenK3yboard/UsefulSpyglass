plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
    maven { url 'https://raw.githubusercontent.com/Fuzss/modresources/main/maven/' }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url 'https://maven.terraformersmc.com/' }
    maven { url 'https://maven.ladysnake.org/releases' }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "maven.modrinth:jade:${jade_version}+fabric"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "dev.emi:trinkets:${trinkets_version}"
    modApi ("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_version}")
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
        commonData {
            client()
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=usefulspyglass"
            ideConfigGenerated(true)
            runDir "build/datagen"
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

processResources {
    from project(":common").sourceSets.main.resources
    exclude '.cache'
}